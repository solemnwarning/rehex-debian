[% WRAPPER page.tt
   title = "General Syntax"
%]

<H2>General Syntax</H2>

<P>
A template is a script with a C-like syntax which can read and process data from the open file and annotate it by setting data types, adding comments, etc. Unlike a C program, templates do not have an entry point (i.e. a <code>main</code> function) - they are executed from top to bottom like a shell script.
</P>

<P>
The most simple template is one that just defines some variables, which will set comments and data types in the file, for example:
</P>

[% WRAPPER "code.tt" -%]
[% WRAPPER "code-type.tt" %]int[% END %] magic;
[% WRAPPER "code-type.tt" %]int[% END %] values[4];
[%- END %]

<P>
Would produce a file like the following:<BR>
<BR>
<IMG SRC="template-example-var1.png" BORDER="0">
</P>

<HR>

<P>
The variables you define can also be read in the template, for example to determine the length of an array from data in the file:
</P>

[% WRAPPER "code.tt" -%]
[% WRAPPER "code-type.tt" %]int[% END %] magic;
[% WRAPPER "code-type.tt" %]short[% END %] size;
[% WRAPPER "code-type.tt" %]int[% END %] values[size];
[%- END %]

<P>
<IMG SRC="template-example-var2.png" BORDER="0">
</P>

<P>
That example is like the first, except the number of elements in the "values" array comes from another variable read from the file rather than being hardcoded.
</P>

<H2>Local variables</H2>

<P>
Local variables are variables that are scoped to the block they are defined in. Unlike normal variables, declaring a local variable will not annotate the file or advance the file position.
<BR>
<BR>
Local variables are used for temporary storage within scripts - for example loop counters, values read from the file using the File Read APIs, etc.
</P>

[% WRAPPER "code.tt" -%]
[% WRAPPER "code-keyword.tt" %]local[% END %] [% WRAPPER "code-type.tt" %]int[% END %] x = 0;
[%- END %]

<H2>Private variables</H2>

<P>
Private variables are like normal variables, except they will not be annotated in the editor or exported from structs. This can be used for reading structured data from the file and then processing it yourself.
<BR>
<BR>
The below example shows a function which can be used to read a data structure from an arbitrary point in the file.
</P>

[% WRAPPER "code.tt" -%]
[% WRAPPER "code-keyword.tt" %]struct[% END %] vec3f
{
	[% WRAPPER "code-type.tt" %]double[% END %] x;
	[% WRAPPER "code-type.tt" %]double[% END %] y;
	[% WRAPPER "code-type.tt" %]double[% END %] z;
};

[% WRAPPER "code-keyword.tt" %]struct[% END %] vec3f read_vec3f([% WRAPPER "code-type.tt" %]int64_t[% END %] offset)
{
	[% WRAPPER "code-type.tt" %]int64_t[% END %] saved_offset = FTell();
	
	FSeek(offset);
	[% WRAPPER "code-keyword.tt" %]private struct[% END %] vec3f v;
	
	FSeek(saved_offset);
	[% WRAPPER "code-keyword.tt" %]return[% END %] v;
}
[%- END %]

[% END %]
