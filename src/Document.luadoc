---
-- An open "Document" (file) in the editor.
-- @classmod rehex.Document

--- Get the length of the file, in bytes.
-- @function buffer_length

--- Get the current cursor position in the file, as a rehex.BitOffset object.
-- @function get_cursor_position

--- Get the filename of the document.
-- @function get_filename

--- Get the title of the document.
-- @function get_title

--- Read data from the document.
-- @function read_data
--
-- @param offset File offset to read from, as a rehex.BitOffset object.
-- @param max_length Maximum number of bytes to read.
--
-- @return The binary data as a string.

--- Get all comments in the document.
-- @function get_comments
--
-- @return A table containing each comment as a table.
--
--    {
--        {
--            offset = rehex.BitOffset(0, 0),
--            length = rehex.BitOffset(0, 0),
--            text   = "First comment",
--        },
--        {
--            offset = rehex.BitOffset(10, 0),
--            length = rehex.BitOffset(8, 0),
--            text   = "Second comment",
--        },
--    }

--- Set a comment in the document.
-- @function set_comment
--
-- @param offset File offset as a rehex.BitOffset object.
-- @param length Length as a rehex.BitOffset object.
-- @param comment rehex.REHex_Document_Comment object.
--
-- @return true on success, false on failure
--
-- Example usage:
--
--    -- Set a comment at the start of the file.
--    doc:set_comment(rehex.BitOffset(0, 0), rehex.BitOffset(0, 0), rehex.Comment.new("Hello world"))
--
-- The length parameter sets how many bytes are encompassed by the comment - if it is zero, the
-- comment will just be inserted at that point in the data, if nonzero, it will visibly nest the
-- data in itself (if the "Nest comments" option is enabled).
--
-- Existing comments with the same offset and length will be replaced.

--- Set multiple comments at once.
-- @function set_comment_bulk
--
-- @param comments Table of bit ranges and comment strings.
--
-- This function allows setting many comments at once. It is primarily intended to speed up scripts
-- which set 100,000s of comments at a time.
--
-- Example usage:
--
--     doc:set_comment_bulk({
--         -- Tag 128 bytes from 0x400 with a comment.
--         { 1024, 0, 128, 0, "Hello world" },
--         
--         -- Tag 64 bytes from 0x800 plus 4 bits with another comment.
--         { 2048, 4, 64, 0, "Byte alignment is for chumps" },
--     )

--- Set the data type of a range of bytes (or bits).
-- @function set_data_type
--
-- @param offset Data offset as a rehex.BitOffset object.
-- @param length Data length as a rehex.BitOffset object.
-- @param type Data type as a string.
--
-- @return true on success, false on failure
--
-- Example data types include:
--
--    "u16le"      - unsigned 16-bit (little endian)
--    "f32be"      - 32-bit float (big endian)
--    "code:i386"  - Machine code (X86)

--- Set the data type of multiple ranges of bytes (or bits).
-- @function set_data_type_bulk
--
-- @param types Table of byte ranges and type information.
--
-- @return true on success, false on failure
--
-- This function allows setting the type of many byte ranges at once. It is primarily intended to
-- speed up scripts which set 100,000s of types at a time.
--
-- Example usage:
--
--     doc:set_data_type_bulk({
--         -- Mark 128 bytes from 0x400 as 16-bit integers.
--         { 1024, 0, 128, 0, "u16le" },
--         
--         -- Mark 64 bytes from 0x800 plus 4 bits as 32-bit floats.
--         { 2048, 4, 64, 0, "f32be" },
--     )

--- Allocate a named highlight colour.
-- @function allocate_highlight_colour
--
-- @param label             Text description of the highlight colour.
-- @param primary_colour    Primary (background) colour (wx.wxNullColour for default).
-- @param secondary_colour  Secondary (foreground) colour (wx.wxNullColour for default).
--
-- @return Highlight colour index on success, -1 on error

--- Set the highlight colour of a range of bytes (or bits).
-- @function set_highlight
--
-- @param offset  Data offset as a rehex.BitOffset object.
-- @param length  Data length as a rehex.BitOffset object.
-- @param colour  Highlight colour index (-1 for none).
--
-- @return true on success, false on failure

--- Set up a virtual address mapping in the document.
-- @function set_virt_mapping
--
-- @param real_offset Offset to start of segment in file.
-- @param virt_offset Virtual address of segment.
-- @param length Length of segment in bytes.
--
-- @return true on success, false on conflict.

--- Clear virtual address mapping by file offset.
-- @function clear_virt_mapping_r
--
-- @param real_offset Offset to segment to clear in file.
-- @param length Length to clear in bytes.
--
-- This method can be used to clear partial of whole segments. Any byte ranges which are not part
-- of a virtual segment will be ignored.

--- Clear virtual address mapping by virtual address.
-- @function clear_virt_mapping_v
--
-- @param virt_offset Address of segment to clear.
-- @param length Length to clear in bytes.
--
-- This method can be used to clear partial of whole segments. Any byte ranges which are not part
-- of a virtual segment will be ignored.

--- Convert a file offset to a virtual address.
-- @function real_to_virt_offset
--
-- @param real_offset - File offset.
--
-- @return Virtual address of file offset, negative if offset isn't part of a virtual segment.

--- Convert a virtual address to a file offset.
-- @function virt_to_real_offset
--
-- @param virt_offset - Virtual address.
--
-- @return File offset of virtual address, negative if address isn't part of a virtual segment.

--- Start an undo/redo transaction.
-- @function transact_begin
--
-- @param desc - Description of operation.
--
-- This method allows batching multiple operations (modifying data, inserting comments, etc) into
-- a single operation in the undo/redo system.
--
-- Every call to this method *MUST* be matched with a call to either the transact_commit() or
-- transact_rollback() method.

--- Commit a transaction started with transact_begin()
-- @function transact_commit

--- Rollback (cancel) a transaction started with transact_begin()
-- @function transact_rollback
